"use strict";(self.webpackChunkwebpack_tutorial=self.webpackChunkwebpack_tutorial||[]).push([[890],{760:(e,t,s)=>{var i=s(477),r=s(217),n=s(854),a=s(516),o=s(328),h=s(458),l=s(865);const c=s.p+"assets/matteo_la_corte_kitaly.glb",d=document.querySelector(".transition-element"),u=document.querySelectorAll('a:not([target="_blank"]');let f,p,v,m;window.onload=()=>{const e=()=>{setTimeout((()=>{d.classList.remove("is-active")}),30);for(let e=0;e<u.length;e++){u[e].addEventListener("click",(e=>{e.preventDefault();let t=e.target.href;d.classList.add("is-active"),setTimeout((function(){location.href=t}),600)}))}},t=document.querySelector("canvas.canvas__project");if(window.matchMedia("(hover: none)").matches&&window.matchMedia("(prefers-reduced-motion: reduce)").matches)e();else{let g={width:t.clientWidth,height:t.clientHeight};v=new i.CP7({antialias:!0,canvas:t,alpha:!0}),v.setSize(g.width,g.height),v.setPixelRatio(Math.min(window.devicePixelRatio,2)),v.physicallyCorrectLights=!0,v.shadowMap.enabled=!0,v.outputEncoding=i.knz,v.shadowMap.type=i.ntZ,v.toneMapping=i.LY2;const w=new i.anP(v);p=new i.xsS,p.environment=w.fromScene(new a.C,.04).texture,window.addEventListener("resize",(()=>{g.width=t.clientWidth,g.height=t.clientHeight,f.aspect=g.width/g.height,f.updateProjectionMatrix(),v.setSize(g.width,g.height),v.setPixelRatio(Math.min(window.devicePixelRatio,2))})),f=new i.cPb(35,g.width/g.height,1,1e3),f.position.x=3.2,f.position.y=.5,f.position.z=.5,f.lookAt(0,.9,.45),p.add(f),m=new o.xC(v),m.addPass(new h.C(p,f));const x=new l.t(.3,.025,10,!1);m.addPass(x);const y=new n._;y.setDecoderPath("https://www.gstatic.com/draco/v1/decoders/");const C=new r.E;C.setDRACOLoader(y),C.load(c,(t=>{p.add(t.scene),e()}),(e=>{}),(s=>{console.log("An error happened"),t.style.display="none",document.querySelector(".canvas-container img").style.display="block",e()}));const S=new i.Mig(16777215,3);p.add(S);const _=new i.cek("0xff0000",70);function T(){requestAnimationFrame(T),m.render(.01)}_.position.set(0,1,3),p.add(_),f.updateProjectionMatrix(),T();const b={};b.x=g.width/2,b.y=g.height/2;const R={};window.addEventListener("mousemove",(e=>{R.x=e.x-b.x,R.y=e.y-b.y,f.position.x+=R.x/1e4,f.position.y+=R.y/3e3,f.position.z+=R.x/3e3,f.lookAt(0,.9,.45),b.x=e.x,b.y=e.y}))}let s=0;!function e(){var t=document.getElementsByClassName("translation-carousel");for(let e=0;e<t.length;e++)t[e].style.display="none";s++,s>t.length&&(s=1);t[s-1].style.display="block",setTimeout(e,3e3)}()}},328:(e,t,s)=>{s.d(t,{xC:()=>l});var i=s(477);const r={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}"};var n=s(304);class a extends n.w{constructor(e,t){super(),this.textureID=void 0!==t?t:"tDiffuse",e instanceof i.jyz?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=i.rDY.clone(e.uniforms),this.material=new i.jyz({defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new n.T(this.material)}render(e,t,s){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=s.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class o extends n.w{constructor(e,t){super(),this.scene=e,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(e,t,s){const i=e.getContext(),r=e.state;let n,a;r.buffers.color.setMask(!1),r.buffers.depth.setMask(!1),r.buffers.color.setLocked(!0),r.buffers.depth.setLocked(!0),this.inverse?(n=0,a=1):(n=1,a=0),r.buffers.stencil.setTest(!0),r.buffers.stencil.setOp(i.REPLACE,i.REPLACE,i.REPLACE),r.buffers.stencil.setFunc(i.ALWAYS,n,4294967295),r.buffers.stencil.setClear(a),r.buffers.stencil.setLocked(!0),e.setRenderTarget(s),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),r.buffers.color.setLocked(!1),r.buffers.depth.setLocked(!1),r.buffers.stencil.setLocked(!1),r.buffers.stencil.setFunc(i.EQUAL,1,4294967295),r.buffers.stencil.setOp(i.KEEP,i.KEEP,i.KEEP),r.buffers.stencil.setLocked(!0)}}class h extends n.w{constructor(){super(),this.needsSwap=!1}render(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}class l{constructor(e,t){if(this.renderer=e,void 0===t){const s=e.getSize(new i.FM8);this._pixelRatio=e.getPixelRatio(),this._width=s.width,this._height=s.height,(t=new i.dd2(this._width*this._pixelRatio,this._height*this._pixelRatio)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===r&&console.error("THREE.EffectComposer relies on CopyShader"),void 0===a&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new a(r),this.clock=new i.SUY}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);-1!==t&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){void 0===e&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let s=!1;for(let t=0,i=this.passes.length;t<i;t++){const i=this.passes[t];if(!1!==i.enabled){if(i.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(t),i.render(this.renderer,this.writeBuffer,this.readBuffer,e,s),i.needsSwap){if(s){const t=this.renderer.getContext(),s=this.renderer.state.buffers.stencil;s.setFunc(t.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),s.setFunc(t.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==o&&(i instanceof o?s=!0:i instanceof h&&(s=!1))}}this.renderer.setRenderTarget(t)}reset(e){if(void 0===e){const t=this.renderer.getSize(new i.FM8);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,(e=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const s=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget1.setSize(s,i),this.renderTarget2.setSize(s,i);for(let e=0;e<this.passes.length;e++)this.passes[e].setSize(s,i)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}new i.iKG(-1,1,1,-1,0,1);const c=new i.u9r;c.setAttribute("position",new i.a$l([-1,3,0,-1,-1,0,3,-1,0],3)),c.setAttribute("uv",new i.a$l([0,2,0,0,2,0],2))},865:(e,t,s)=>{s.d(t,{t:()=>a});var i=s(477),r=s(304);const n={uniforms:{tDiffuse:{value:null},time:{value:0},nIntensity:{value:.5},sIntensity:{value:.05},sCount:{value:4096},grayscale:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\t#include <common>\n\n\t\t// control parameter\n\t\tuniform float time;\n\n\t\tuniform bool grayscale;\n\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\tuniform float nIntensity;\n\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\tuniform float sIntensity;\n\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\tuniform float sCount;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t// sample the source\n\t\t\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\n\n\t\t// make some noise\n\t\t\tfloat dx = rand( vUv + time );\n\n\t\t// add noise\n\t\t\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\n\n\t\t// get us a sine and cosine\n\t\t\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\n\n\t\t// add scanlines\n\t\t\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\n\n\t\t// interpolate between source and result by intensity\n\t\t\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\n\n\t\t// convert to grayscale if desired\n\t\t\tif( grayscale ) {\n\n\t\t\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n\n\t\t\t}\n\n\t\t\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\n\n\t\t}"};class a extends r.w{constructor(e,t,s,a){super(),void 0===n&&console.error("THREE.FilmPass relies on FilmShader");const o=n;this.uniforms=i.rDY.clone(o.uniforms),this.material=new i.jyz({uniforms:this.uniforms,vertexShader:o.vertexShader,fragmentShader:o.fragmentShader}),void 0!==a&&(this.uniforms.grayscale.value=a),void 0!==e&&(this.uniforms.nIntensity.value=e),void 0!==t&&(this.uniforms.sIntensity.value=t),void 0!==s&&(this.uniforms.sCount.value=s),this.fsQuad=new r.T(this.material)}render(e,t,s,i){this.uniforms.tDiffuse.value=s.texture,this.uniforms.time.value+=i,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}},304:(e,t,s)=>{s.d(t,{T:()=>o,w:()=>r});var i=s(477);class r{constructor(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const n=new i.iKG(-1,1,1,-1,0,1),a=new i.u9r;a.setAttribute("position",new i.a$l([-1,3,0,-1,-1,0,3,-1,0],3)),a.setAttribute("uv",new i.a$l([0,2,0,0,2,0],2));class o{constructor(e){this._mesh=new i.Kj0(a,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,n)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}},458:(e,t,s)=>{s.d(t,{C:()=>n});var i=s(477),r=s(304);class n extends r.w{constructor(e,t,s,r,n){super(),this.scene=e,this.camera=t,this.overrideMaterial=s,this.clearColor=r,this.clearAlpha=void 0!==n?n:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new i.Ilk}render(e,t,s){const i=e.autoClear;let r,n;e.autoClear=!1,void 0!==this.overrideMaterial&&(n=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),r=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:s),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,r),void 0!==this.overrideMaterial&&(this.scene.overrideMaterial=n),e.autoClear=i}}}},e=>{e.O(0,[147],(()=>{return t=760,e(e.s=t);var t}));e.O()}]);